<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laradock</title>
    <link>http://laradock.io/index.xml</link>
    <description>Recent content on Laradock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://laradock.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction</title>
      <link>http://laradock.io/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/introduction/</guid>
      <description>

&lt;p&gt;Laradock strives to make the PHP development experience easier and faster.&lt;/p&gt;

&lt;p&gt;It contains pre-packaged Docker Images that provides you a wonderful &lt;em&gt;development&lt;/em&gt; environment without requiring you to install PHP, NGINX, MySQL, Redis, and any other software on your machines.&lt;/p&gt;

&lt;p&gt;Laradock is configured to run Laravel Apps by default, and it can be modified to run all kinds of PHP Apps (Symfony, CodeIgniter, WordPress, Drupal&amp;hellip;).&lt;/p&gt;

&lt;h2 id=&#34;quick-overview&#34;&gt;Quick Overview&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see how easy it is to install &lt;code&gt;NGINX&lt;/code&gt;, &lt;code&gt;PHP&lt;/code&gt;, &lt;code&gt;Composer&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt; and &lt;code&gt;beanstalkd&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;1 - Clone Laradock inside your PHP project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Laradock/laradock.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Enter the laradock folder and rename &lt;code&gt;env-example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp env-example .env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Run your containers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose up -d nginx mysql redis beanstalkd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Open your project&amp;rsquo;s &lt;code&gt;.env&lt;/code&gt; file and set the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DB_HOST=mysql
REDIS_HOST=redis
QUEUE_HOST=beanstalkd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Open your browser and visit localhost: &lt;code&gt;http://localhost&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;That&#39;s it! enjoy :)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;what-is-docker&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt; is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Operating-system-level_virtualization&#34;&gt;operating-system-level virtualization&lt;/a&gt; on Linux, Mac OS and Windows.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;why-docker-not-vagrant&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-docker-not-vagrant&#34;&gt;Why Docker not Vagrant!?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; creates Virtual Machines in minutes while Docker creates Virtual Containers in seconds.&lt;/p&gt;

&lt;p&gt;Instead of providing a full Virtual Machines, like you get with Vagrant, Docker provides you &lt;strong&gt;lightweight&lt;/strong&gt; Virtual Containers, that share the same kernel and allow to safely execute independent processes.&lt;/p&gt;

&lt;p&gt;In addition to the speed, Docker gives tons of features that cannot be achieved with Vagrant.&lt;/p&gt;

&lt;p&gt;Most importantly Docker can run on Development and on Production (same environment everywhere). While Vagrant is designed for Development only, (so you have to re-provision your server on Production every time).&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;laradock-vs-homestead&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;laradock-vs-homestead-for-laravel-developers&#34;&gt;Laradock VS Homestead (For Laravel Developers)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Laradock It&amp;rsquo;s like Laravel Homestead but for Docker instead of Vagrant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Laradock and &lt;a href=&#34;https://laravel.com/docs/master/homestead&#34;&gt;Homestead&lt;/a&gt; both give you complete virtual development environments. (Without the need to install and configure every single software on your own Operating System).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Homestead is a tool that controls Vagrant for you (using Homestead special commands). And Vagrant manages your Virtual Machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Laradock is a tool that controls Docker for you (using Docker &amp;amp; Docker Compose official commands). And Docker manages your Virtual Containers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running a virtual container is much faster than running a full virtual Machine. Thus &lt;strong&gt;Laradock is much faster than Homestead&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;demo-video&#34;&gt;Demo Video&lt;/h2&gt;

&lt;p&gt;What&amp;rsquo;s better than a &lt;strong&gt;Demo Video&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laradock &lt;a href=&#34;https://www.youtube.com/watch?v=TQii1jDa96Y&#34;&gt;v4.*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Laradock &lt;a href=&#34;https://www.youtube.com/watch?v=-DamFMczwDA&#34;&gt;v2.*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Laradock &lt;a href=&#34;https://www.youtube.com/watch?v=jGkyO6Is_aI&#34;&gt;v0.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Laradock &lt;a href=&#34;https://www.youtube.com/watch?v=3YQsHe6oF80&#34;&gt;v0.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;features&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Easy switch between PHP versions: 7.0, 5.6, 5.5&amp;hellip;&lt;/li&gt;
&lt;li&gt;Choose your favorite database engine: MySQL, Postgres, MariaDB&amp;hellip;&lt;/li&gt;
&lt;li&gt;Run your own combination of software: Memcached, HHVM, Beanstalkd&amp;hellip;&lt;/li&gt;
&lt;li&gt;Every software runs on a separate container: PHP-FPM, NGINX, PHP-CLI&amp;hellip;&lt;/li&gt;
&lt;li&gt;Easy to customize any container, with simple edit to the &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;All Images extends from an official base Image. (Trusted base Images).&lt;/li&gt;
&lt;li&gt;Pre-configured NGINX for Laravel.&lt;/li&gt;
&lt;li&gt;Easy to apply configurations inside containers.&lt;/li&gt;
&lt;li&gt;Clean and well structured Dockerfiles (&lt;code&gt;Dockerfile&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Latest version of the Docker Compose file (&lt;code&gt;docker-compose&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Everything is visible and editable.&lt;/li&gt;
&lt;li&gt;Fast Images Builds.&lt;/li&gt;
&lt;li&gt;More to come every week..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;Supported-Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;supported-software-containers&#34;&gt;Supported Software (Containers)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Database Engines:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Neo4j&lt;/li&gt;
&lt;li&gt;RethinkDB&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;Postgres Postgis&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache Engines:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Memcached&lt;/li&gt;
&lt;li&gt;Aerospike&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PHP Servers:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;NGINX&lt;/li&gt;
&lt;li&gt;Apache2&lt;/li&gt;
&lt;li&gt;Caddy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PHP Compilers:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;PHP-FPM&lt;/li&gt;
&lt;li&gt;HHVM&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Queuing Systems:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Beanstalkd&lt;/li&gt;
&lt;li&gt;Beanstalkd Console&lt;/li&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;RabbitMQ Console&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;PhpMyAdmin&lt;/li&gt;
&lt;li&gt;Adminer&lt;/li&gt;
&lt;li&gt;PgAdmin&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;li&gt;Certbot&lt;/li&gt;
&lt;li&gt;Mailhog&lt;/li&gt;
&lt;li&gt;Minio&lt;/li&gt;
&lt;li&gt;Workspace

&lt;ul&gt;
&lt;li&gt;PHP7-CLI&lt;/li&gt;
&lt;li&gt;Composer&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Linuxbrew&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Gulp&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;xDebug&lt;/li&gt;
&lt;li&gt;Envoy&lt;/li&gt;
&lt;li&gt;Deployer&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;Yarn&lt;/li&gt;
&lt;li&gt;&amp;hellip; Many other supported tools are not documented. (Will be updated soon)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can&amp;rsquo;t find your Software, build it yourself and add it to this list. Contributions are welcomed :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;chat-with-us&#34;&gt;Chat with us&lt;/h2&gt;

&lt;p&gt;You are welcome to join our chat room on Gitter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gitter.im/Laradock/laradock?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Laradock/laradock.svg&#34; alt=&#34;Gitter&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://laradock.io/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/getting-started/</guid>
      <description>

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker/&#34;&gt;Docker&lt;/a&gt; &lt;code&gt;&amp;gt;= 1.12&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Choose the setup the best suits your needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#A&#34;&gt;A) Setup for Single Project&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#A1&#34;&gt;A.1) Already have a PHP project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#A2&#34;&gt;A.2) Don&amp;rsquo;t have a PHP project yet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#B&#34;&gt;B) Setup for Multiple Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;A&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-setup-for-single-project&#34;&gt;A) Setup for Single Project&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;(Follow these steps if you want a separate Docker environment for each project)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;A1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-1-already-have-a-php-project&#34;&gt;A.1) Already have a PHP project:&lt;/h3&gt;

&lt;p&gt;1 - Clone laradock on your project root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add https://github.com/Laradock/laradock.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are not using Git yet for your project, you can use &lt;code&gt;git clone&lt;/code&gt; instead of &lt;code&gt;git submodule&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Note 2: To keep track of your Laradock changes, between your projects and also keep Laradock updated. &lt;a href=&#34;http://laradock.io/documentation/#keep-track-of-your-laradock-changes&#34;&gt;Check this&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your folder structure should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ project-a
	+ laradock-a
+ project-b
	+ laradock-b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(It&amp;rsquo;s important to rename the folders differently in each project.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now jump to the &lt;a href=&#34;#Usage&#34;&gt;Usage&lt;/a&gt; section.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;A2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-2-don-t-have-a-php-project-yet&#34;&gt;A.2) Don&amp;rsquo;t have a PHP project yet:&lt;/h3&gt;

&lt;p&gt;1 - Clone this repository anywhere on your machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/laradock/laradock.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your folder structure should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ laradock
+ project-z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Edit your web server sites configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In case of NGINX:&lt;/strong&gt; open &lt;code&gt;nginx/sites/default.conf&lt;/code&gt; and change the &lt;code&gt;root&lt;/code&gt; from &lt;code&gt;/var/www/public&lt;/code&gt; to &lt;code&gt;/var/www/{my-project-folder-name}/public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Or you can keep &lt;code&gt;default.conf&lt;/code&gt; as it is, and create a separate config &lt;code&gt;my-site.conf&lt;/code&gt; file for it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In case of Apache:&lt;/strong&gt; :P&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now jump to the &lt;a href=&#34;#Usage&#34;&gt;Usage&lt;/a&gt; section.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;B&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;b-setup-for-multiple-projects&#34;&gt;B) Setup for Multiple Projects:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;(Follow these steps if you want a single Docker environment for all your project)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1 - Clone this repository anywhere on your machine (similar to &lt;a href=&#34;#A2&#34;&gt;Steps A.2. from above&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/laradock/laradock.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your folder structure should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ laradock
+ project-1
+ project-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Go to &lt;code&gt;nginx/sites&lt;/code&gt; and create config files to point to different project directory when visiting different domains.&lt;/p&gt;

&lt;p&gt;Laradock by default includes &lt;code&gt;project-1.conf&lt;/code&gt; and &lt;code&gt;project-2.conf&lt;/code&gt; as working samples.&lt;/p&gt;

&lt;p&gt;3 - change the default names &lt;code&gt;project-n&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;You can rename the config files, project folders and domains as you like, just make sure the &lt;code&gt;root&lt;/code&gt; in the config files, is pointing to the correct project folder name.&lt;/p&gt;

&lt;p&gt;4 - Add the domains to the &lt;strong&gt;hosts&lt;/strong&gt; files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1  project-1.dev
127.0.0.1  project-2.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now jump to the &lt;a href=&#34;#Usage&#34;&gt;Usage&lt;/a&gt; section.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;Usage&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Read Before starting:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using &lt;strong&gt;Docker Toolbox&lt;/strong&gt; (VM), do one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrade to Docker &lt;a href=&#34;https://www.docker.com/products/docker&#34;&gt;Native&lt;/a&gt; for Mac/Windows (Recommended). Check out &lt;a href=&#34;http://laradock.io/documentation/#upgrading-laradock&#34;&gt;Upgrading Laradock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use Laradock v3.*. Visit the &lt;a href=&#34;https://github.com/laradock/laradock/tree/LaraDock-ToolBox&#34;&gt;LaraDock-ToolBox&lt;/a&gt; branch. &lt;em&gt;(outdated)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; If you used an older version of Laradock it&amp;rsquo;s highly recommended to rebuild the containers you need to use &lt;a href=&#34;#Build-Re-build-Containers&#34;&gt;see how you rebuild a container&lt;/a&gt; in order to prevent as much errors as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1 - Enter the laradock folder and rename &lt;code&gt;env-example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp env-example .env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can edit the &lt;code&gt;.env&lt;/code&gt; file to chose which software&amp;rsquo;s you want to be installed in your environment. You can always refer to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to see how those variables are been used.&lt;/p&gt;

&lt;p&gt;2 - Build the enviroment and run it using &lt;code&gt;docker-compose&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example we&amp;rsquo;ll see how to run NGINX (web server) and MySQL (database engine) to host a PHP Web Scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d nginx mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;workspace&lt;/code&gt; and &lt;code&gt;php-fpm&lt;/code&gt; will run automatically in most of the cases, so no need to specify them in the &lt;code&gt;up&lt;/code&gt; command. If you couldn&amp;rsquo;t find them running then you need specify them as follow: &lt;code&gt;docker-compose up -d nginx php-fpm mysql workspace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can select your own combination of containers form the list below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;php-fpm&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;redis&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt;, &lt;code&gt;mariadb&lt;/code&gt;, &lt;code&gt;neo4j&lt;/code&gt;, &lt;code&gt;mongo&lt;/code&gt;, &lt;code&gt;apache2&lt;/code&gt;, &lt;code&gt;caddy&lt;/code&gt;, &lt;code&gt;memcached&lt;/code&gt;, &lt;code&gt;beanstalkd&lt;/code&gt;, &lt;code&gt;beanstalkd-console&lt;/code&gt;, &lt;code&gt;rabbitmq&lt;/code&gt;, &lt;code&gt;beanstalkd-console&lt;/code&gt;, &lt;code&gt;workspace&lt;/code&gt;, &lt;code&gt;phpmyadmin&lt;/code&gt;, &lt;code&gt;adminer&lt;/code&gt;, &lt;code&gt;aerospike&lt;/code&gt;, &lt;code&gt;pgadmin&lt;/code&gt;, &lt;code&gt;elasticsearch&lt;/code&gt;, &lt;code&gt;rethinkdb&lt;/code&gt;, &lt;code&gt;postgres-postgis&lt;/code&gt;, &lt;code&gt;certbot&lt;/code&gt;, &lt;code&gt;mailhog&lt;/code&gt;, &lt;code&gt;minio&lt;/code&gt; and more&amp;hellip;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(Please note that sometimes we forget to update the docs, so check the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to see an updated list of all available containers).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
3 - Enter the Workspace container, to execute commands like (Artisan, Composer, PHPUnit, Gulp, &amp;hellip;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec workspace bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Alternatively, for Windows PowerShell users: execute the following command to enter any running container:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it {workspace-container-id} bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can add &lt;code&gt;--user=laradock&lt;/code&gt; to have files created as your host&amp;rsquo;s user. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose exec --user=laradock workspace bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You can change the PUID (User id) and PGID (group id) variables from the &lt;code&gt;.env&lt;/code&gt; file)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
4 - Update your project configurations to use the database host&lt;/p&gt;

&lt;p&gt;Open your PHP project&amp;rsquo;s &lt;code&gt;.env&lt;/code&gt; file or whichever configuration file you are reading from, and set the database host &lt;code&gt;DB_HOST&lt;/code&gt; to &lt;code&gt;mysql&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;DB_HOST=mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;If you want to install Laravel as PHP project, see &lt;a href=&#34;#Install-Laravel&#34;&gt;How to Install Laravel in a Docker Container&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
5 - Open your browser and visit your localhost address &lt;code&gt;http://localhost/&lt;/code&gt;. If you followed the multiple projects setup, you can visit &lt;code&gt;http://project-1.dev/&lt;/code&gt; and &lt;code&gt;http://project-2.dev/&lt;/code&gt;. But first don&amp;rsquo;t&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>http://laradock.io/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/documentation/</guid>
      <description>

&lt;p&gt;&lt;a name=&#34;List-current-running-Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;list-current-running-containers&#34;&gt;List current running Containers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use the following command if you want to see only this project containers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Close-all-running-Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;close-all-running-containers&#34;&gt;Close all running Containers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop single container do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose stop {container-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Delete-all-existing-Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;delete-all-existing-containers&#34;&gt;Delete all existing Containers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Enter-Container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;enter-a-container-run-commands-in-a-running-container&#34;&gt;Enter a Container (run commands in a running Container)&lt;/h2&gt;

&lt;p&gt;1 - First list the current running containers with &lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2 - Enter any container using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec {container-name} bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example: enter MySQL container&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec mysql bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Example: enter to MySQL prompt within MySQL container&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec mysql mysql -u homestead -psecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - To exit a container, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Edit-Container&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;edit-default-container-configuration&#34;&gt;Edit default container configuration&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; and change anything you want.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Change MySQL Database Name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    environment:
        MYSQL_DATABASE: laradock
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change Redis default port to 1111:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    ports:
        - &amp;quot;1111:6379&amp;quot;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Edit-a-Docker-Image&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;edit-a-docker-image&#34;&gt;Edit a Docker Image&lt;/h2&gt;

&lt;p&gt;1 - Find the &lt;code&gt;Dockerfile&lt;/code&gt; of the image you want to edit,
&lt;br&gt;
example for &lt;code&gt;mysql&lt;/code&gt; it will be &lt;code&gt;mysql/Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2 - Edit the file the way you want.&lt;/p&gt;

&lt;p&gt;3 - Re-build the container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More info on Containers rebuilding &lt;a href=&#34;#Build-Re-build-Containers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Build-Re-build-Containers&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;build-re-build-containers&#34;&gt;Build/Re-build Containers&lt;/h2&gt;

&lt;p&gt;If you do any change to any &lt;code&gt;Dockerfile&lt;/code&gt; make sure you run this command, for the changes to take effect:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Optionally you can specify which container to rebuild (instead of rebuilding all the containers):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build {container-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might use the &lt;code&gt;--no-cache&lt;/code&gt; option if you want full rebuilding (&lt;code&gt;docker-compose build --no-cache {container-name}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Add-Docker-Images&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;add-more-software-docker-images&#34;&gt;Add more Software (Docker Images)&lt;/h2&gt;

&lt;p&gt;To add an image (software), just edit the &lt;code&gt;docker-compose.yml&lt;/code&gt; and add your container details, to do so you need to be familiar with the &lt;a href=&#34;https://docs.docker.com/compose/compose-file/&#34;&gt;docker compose file syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;View-the-Log-files&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;view-the-log-files&#34;&gt;View the Log files&lt;/h2&gt;

&lt;p&gt;The NGINX Log file is stored in the &lt;code&gt;logs/nginx&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;However to view the logs of all the other containers (MySQL, PHP-FPM,&amp;hellip;) you can run this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs {container-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More &lt;a href=&#34;https://docs.docker.com/compose/reference/logs/&#34;&gt;options&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker logs -f {container-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;PHP&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;Install-PHP-Extensions&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-php-extensions&#34;&gt;Install PHP Extensions&lt;/h2&gt;

&lt;p&gt;Before installing PHP extensions, you have to decide whether you need for the &lt;code&gt;FPM&lt;/code&gt; or &lt;code&gt;CLI&lt;/code&gt; because each lives on a different container, if you need it for both you have to edit both containers.&lt;/p&gt;

&lt;p&gt;The PHP-FPM extensions should be installed in &lt;code&gt;php-fpm/Dockerfile-XX&lt;/code&gt;. &lt;em&gt;(replace XX with your default PHP version number)&lt;/em&gt;.
&lt;br&gt;
The PHP-CLI extensions should be installed in &lt;code&gt;workspace/Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Change-the-PHP-FPM-Version&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-the-php-fpm-version&#34;&gt;Change the (PHP-FPM) Version&lt;/h2&gt;

&lt;p&gt;By default &lt;strong&gt;PHP-FPM 7.0&lt;/strong&gt; is running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The PHP-FPM is responsible of serving your application code, you don&amp;rsquo;t have to change the PHP-CLI version if you are planning to run your application on different PHP-FPM version.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;a-switch-from-php-7-0-to-php-5-6&#34;&gt;A) Switch from PHP &lt;code&gt;7.0&lt;/code&gt; to PHP &lt;code&gt;5.6&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2 - Search for &lt;code&gt;Dockerfile-70&lt;/code&gt; in the PHP container section.&lt;/p&gt;

&lt;p&gt;3 - Change the version number, by replacing &lt;code&gt;Dockerfile-70&lt;/code&gt; with &lt;code&gt;Dockerfile-56&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    php-fpm:
        build:
            context: ./php-fpm
            dockerfile: Dockerfile-70
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Finally rebuild the container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build php-fpm
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;For more details about the PHP base image, visit the &lt;a href=&#34;https://hub.docker.com/_/php/&#34;&gt;official PHP docker images&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;b-switch-from-php-7-0-or-5-6-to-php-5-5&#34;&gt;B) Switch from PHP &lt;code&gt;7.0&lt;/code&gt; or &lt;code&gt;5.6&lt;/code&gt; to PHP &lt;code&gt;5.5&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We do not natively support PHP 5.5 anymore, but you can get it in few steps:&lt;/p&gt;

&lt;p&gt;1 - Clone &lt;code&gt;https://github.com/laradock/php-fpm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3 - Rename &lt;code&gt;Dockerfile-56&lt;/code&gt; to &lt;code&gt;Dockerfile-55&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3 - Edit the file &lt;code&gt;FROM php:5.6-fpm&lt;/code&gt; to &lt;code&gt;FROM php:5.5-fpm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4 - Build an image from &lt;code&gt;Dockerfile-55&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;5 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;6 - Point &lt;code&gt;php-fpm&lt;/code&gt; to your &lt;code&gt;Dockerfile-55&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Change-the-PHP-CLI-Version&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-the-php-cli-version&#34;&gt;Change the PHP-CLI Version&lt;/h2&gt;

&lt;p&gt;By default &lt;strong&gt;PHP-CLI 7.0&lt;/strong&gt; is running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: it&amp;rsquo;s not very essential to edit the PHP-CLI version. The PHP-CLI is only used for the Artisan Commands &amp;amp; Composer. It doesn&amp;rsquo;t serve your Application code, this is the PHP-FPM job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The PHP-CLI is installed in the Workspace container. To change the PHP-CLI version you need to edit the &lt;code&gt;workspace/Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Right now you have to manually edit the &lt;code&gt;Dockerfile&lt;/code&gt; or create a new one like it&amp;rsquo;s done for the PHP-FPM. (consider contributing).&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-xDebug&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-xdebug&#34;&gt;Install xDebug&lt;/h2&gt;

&lt;p&gt;1 - First install &lt;code&gt;xDebug&lt;/code&gt; in the Workspace and the PHP-FPM Containers:
&lt;br&gt;
a) open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
b) search for the &lt;code&gt;INSTALL_XDEBUG&lt;/code&gt; argument under the Workspace Container
&lt;br&gt;
c) set it to &lt;code&gt;true&lt;/code&gt;
&lt;br&gt;
d) search for the &lt;code&gt;INSTALL_XDEBUG&lt;/code&gt; argument under the PHP-FPM Container
&lt;br&gt;
e) set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_XDEBUG=true
    ...
    php-fpm:
        build:
            context: ./php-fpm
            args:
                - INSTALL_XDEBUG=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Re-build the containers &lt;code&gt;docker-compose build workspace php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3 - Open &lt;code&gt;laradock/workspace/xdebug.ini&lt;/code&gt; and/or &lt;code&gt;laradock/php-fpm/xdebug.ini&lt;/code&gt; and enable at least the following configurations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xdebug.remote_autostart=1
xdebug.remote_enable=1
xdebug.remote_connect_back=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For information on how to configure xDebug with your IDE and work it out, check this &lt;a href=&#34;https://github.com/LarryEitel/laravel-laradock-phpstorm&#34;&gt;Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Control-xDebug&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;start-stop-xdebug&#34;&gt;Start/Stop xDebug:&lt;/h2&gt;

&lt;p&gt;By installing xDebug, you are enabling it to run on startup by default.&lt;/p&gt;

&lt;p&gt;To control the behavior of xDebug (in the &lt;code&gt;php-fpm&lt;/code&gt; Container), you can run the following commands from the Laradock root folder, (at the same prompt where you run docker-compose):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stop xDebug from running by default: &lt;code&gt;./xdebugPhpFpm stop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start xDebug by default: &lt;code&gt;./xdebugPhpFpm start&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See the status: &lt;code&gt;./xdebugPhpFpm status&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: If &lt;code&gt;./xdebugPhpFpm&lt;/code&gt; doesn&amp;rsquo;t execute and gives &lt;code&gt;Permission Denied&lt;/code&gt; error the problem can be that file &lt;code&gt;xdebugPhpFpm&lt;/code&gt; doesn&amp;rsquo;t have execution access. This can be fixed by running &lt;code&gt;chmod&lt;/code&gt; command  with desired access permissions.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Deployer&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-deployer-deployment-tool-for-php&#34;&gt;Install Deployer (Deployment tool for PHP)&lt;/h2&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
2 - Search for the &lt;code&gt;INSTALL_DEPLOYER&lt;/code&gt; argument under the Workspace Container
&lt;br&gt;
3 - Set it to &lt;code&gt;true&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_DEPLOYER=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Re-build the containers &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://deployer.org/docs&#34;&gt;&lt;strong&gt;Deployer Documentation Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Production&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Laradock-for-Production&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;prepare-laradock-for-production&#34;&gt;Prepare Laradock for Production&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s recommended for production to create a custom &lt;code&gt;docker-compose.yml&lt;/code&gt; file. For that reason, Laradock is shipped with &lt;code&gt;production-docker-compose.yml&lt;/code&gt; which should contain only the containers you are planning to run on production (usage example: &lt;code&gt;docker-compose -f production-docker-compose.yml up -d nginx mysql redis ...&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note: The Database (MySQL/MariaDB/&amp;hellip;) ports should not be forwarded on production, because Docker will automatically publish the port on the host, which is quite insecure, unless specifically told not to. So make sure to remove these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ports:
    - &amp;quot;3306:3306&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn more about how Docker publishes ports, please read &lt;a href=&#34;https://fralef.me/docker-and-iptables.html&#34;&gt;this excellent post on the subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Digital-Ocean&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup-laravel-and-docker-on-digital-ocean&#34;&gt;Setup Laravel and Docker on Digital Ocean&lt;/h2&gt;

&lt;h3 id=&#34;full-guide-here-https-github-com-laradock-laradock-blob-master-guides-digital-ocean-md&#34;&gt;&lt;a href=&#34;https://github.com/laradock/laradock/blob/master/_guides/digital_ocean.md&#34;&gt;Full Guide Here&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Laravel&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;Install-Laravel&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-laravel-from-a-docker-container&#34;&gt;Install Laravel from a Docker Container&lt;/h2&gt;

&lt;p&gt;1 - First you need to enter the Workspace Container.&lt;/p&gt;

&lt;p&gt;2 - Install Laravel.&lt;/p&gt;

&lt;p&gt;Example using Composer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer create-project laravel/laravel my-cool-app &amp;quot;5.2.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We recommend using &lt;code&gt;composer create-project&lt;/code&gt; instead of the Laravel installer, to install Laravel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more about the Laravel installation click &lt;a href=&#34;https://laravel.com/docs/master#installing-laravel&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3 - Edit &lt;code&gt;docker-compose.yml&lt;/code&gt; to Map the new application path:&lt;/p&gt;

&lt;p&gt;By default, Laradock assumes the Laravel application is living in the parent directory of the laradock folder.&lt;/p&gt;

&lt;p&gt;Since the new Laravel application is in the &lt;code&gt;my-cool-app&lt;/code&gt; folder, we need to replace &lt;code&gt;../:/var/www&lt;/code&gt; with &lt;code&gt;../my-cool-app/:/var/www&lt;/code&gt;, as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    application:
		 image: tianon/true
        volumes:
            - ../my-cool-app/:/var/www
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Go to that folder and start working..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd my-cool-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5 - Go back to the Laradock installation steps to see how to edit the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Run-Artisan-Commands&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;run-artisan-commands&#34;&gt;Run Artisan Commands&lt;/h2&gt;

&lt;p&gt;You can run artisan commands and many other Terminal commands from the Workspace container.&lt;/p&gt;

&lt;p&gt;1 - Make sure you have the workspace container running.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d workspace // ..and all your other containers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Find the Workspace container name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Enter the Workspace container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec workspace bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;--user=laradock&lt;/code&gt; (example &lt;code&gt;docker-compose exec --user=laradock workspace bash&lt;/code&gt;) to have files created as your host&amp;rsquo;s user.&lt;/p&gt;

&lt;p&gt;4 - Run anything you want :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;php artisan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;phpunit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Run-Laravel-Queue-Worker&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;run-laravel-queue-worker&#34;&gt;Run Laravel Queue Worker&lt;/h2&gt;

&lt;p&gt;1 - First add &lt;code&gt;php-worker&lt;/code&gt; container. It will be similar as like PHP-FPM Container.
&lt;br&gt;
a) open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
b) add a new service container by simply copy-paste this section below PHP-FPM container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    php-worker:
      build:
        context: ./php-fpm
        dockerfile: Dockerfile-70 # or Dockerfile-56, choose your PHP-FPM container setting
      volumes_from:
        - applications
      command: php artisan queue:work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Start everything up&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d php-worker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Redis&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-redis&#34;&gt;Use Redis&lt;/h2&gt;

&lt;p&gt;1 - First make sure you run the Redis Container (&lt;code&gt;redis&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your Laravel&amp;rsquo;s &lt;code&gt;.env&lt;/code&gt; file and set the &lt;code&gt;REDIS_HOST&lt;/code&gt; to &lt;code&gt;redis&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;REDIS_HOST=redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t find the &lt;code&gt;REDIS_HOST&lt;/code&gt; variable in your &lt;code&gt;.env&lt;/code&gt; file. Go to the database configuration file &lt;code&gt;config/database.php&lt;/code&gt; and replace the default &lt;code&gt;127.0.0.1&lt;/code&gt; IP with &lt;code&gt;redis&lt;/code&gt; for Redis like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;redis&#39; =&amp;gt; [
    &#39;cluster&#39; =&amp;gt; false,
    &#39;default&#39; =&amp;gt; [
        &#39;host&#39;     =&amp;gt; &#39;redis&#39;,
        &#39;port&#39;     =&amp;gt; 6379,
        &#39;database&#39; =&amp;gt; 0,
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - To enable Redis Caching and/or for Sessions Management. Also from the &lt;code&gt;.env&lt;/code&gt; file set &lt;code&gt;CACHE_DRIVER&lt;/code&gt; and &lt;code&gt;SESSION_DRIVER&lt;/code&gt; to &lt;code&gt;redis&lt;/code&gt; instead of the default &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;CACHE_DRIVER=redis
SESSION_DRIVER=redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Finally make sure you have the &lt;code&gt;predis/predis&lt;/code&gt; package &lt;code&gt;(~1.0)&lt;/code&gt; installed via Composer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require predis/predis:^1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5 - You can manually test it from Laravel with this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;\Cache::store(&#39;redis&#39;)-&amp;gt;put(&#39;Laradock&#39;, &#39;Awesome&#39;, 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Mongo&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-mongo&#34;&gt;Use Mongo&lt;/h2&gt;

&lt;p&gt;1 - First install &lt;code&gt;mongo&lt;/code&gt; in the Workspace and the PHP-FPM Containers:
&lt;br&gt;
a) open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
b) search for the &lt;code&gt;INSTALL_MONGO&lt;/code&gt; argument under the Workspace Container
&lt;br&gt;
c) set it to &lt;code&gt;true&lt;/code&gt;
&lt;br&gt;
d) search for the &lt;code&gt;INSTALL_MONGO&lt;/code&gt; argument under the PHP-FPM Container
&lt;br&gt;
e) set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_MONGO=true
    ...
    php-fpm:
        build:
            context: ./php-fpm
            args:
                - INSTALL_MONGO=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Re-build the containers &lt;code&gt;docker-compose build workspace php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3 - Run the MongoDB Container (&lt;code&gt;mongo&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Add the MongoDB configurations to the &lt;code&gt;config/database.php&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [

    &#39;mongodb&#39; =&amp;gt; [
        &#39;driver&#39;   =&amp;gt; &#39;mongodb&#39;,
        &#39;host&#39;     =&amp;gt; env(&#39;DB_HOST&#39;, &#39;localhost&#39;),
        &#39;port&#39;     =&amp;gt; env(&#39;DB_PORT&#39;, 27017),
        &#39;database&#39; =&amp;gt; env(&#39;DB_DATABASE&#39;, &#39;database&#39;),
        &#39;username&#39; =&amp;gt; &#39;&#39;,
        &#39;password&#39; =&amp;gt; &#39;&#39;,
        &#39;options&#39;  =&amp;gt; [
            &#39;database&#39; =&amp;gt; &#39;&#39;,
        ]
    ],

	// ...

],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5 - Open your Laravel&amp;rsquo;s &lt;code&gt;.env&lt;/code&gt; file and update the following variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set the &lt;code&gt;DB_HOST&lt;/code&gt; to your &lt;code&gt;mongo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;DB_PORT&lt;/code&gt; to &lt;code&gt;27017&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;DB_DATABASE&lt;/code&gt; to &lt;code&gt;database&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6 - Finally make sure you have the &lt;code&gt;jenssegers/mongodb&lt;/code&gt; package installed via Composer and its Service Provider is added.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require jenssegers/mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More details about this &lt;a href=&#34;https://github.com/jenssegers/laravel-mongodb#installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;7 - Test it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First let your Models extend from the Mongo Eloquent Model. Check the &lt;a href=&#34;https://github.com/jenssegers/laravel-mongodb#eloquent&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enter the Workspace Container.&lt;/li&gt;
&lt;li&gt;Migrate the Database &lt;code&gt;php artisan migrate&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-phpMyAdmin&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-phpmyadmin&#34;&gt;Use PhpMyAdmin&lt;/h2&gt;

&lt;p&gt;1 - Run the phpMyAdmin Container (&lt;code&gt;phpmyadmin&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use with mysql
docker-compose up -d mysql phpmyadmin

# use with mariadb
docker-compose up -d mariadb phpmyadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit the localhost on port &lt;strong&gt;8080&lt;/strong&gt;:  &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Adminer&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-adminer&#34;&gt;Use Adminer&lt;/h2&gt;

&lt;p&gt;1 - Run the Adminer Container (&lt;code&gt;adminer&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d adminer  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit the localhost on port &lt;strong&gt;8080&lt;/strong&gt;:  &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-pgAdmin&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-pgadmin&#34;&gt;Use PgAdmin&lt;/h2&gt;

&lt;p&gt;1 - Run the pgAdmin Container (&lt;code&gt;pgadmin&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d postgres pgadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit the localhost on port &lt;strong&gt;5050&lt;/strong&gt;:  &lt;code&gt;http://localhost:5050&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Beanstalkd&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-beanstalkd&#34;&gt;Use Beanstalkd&lt;/h2&gt;

&lt;p&gt;1 - Run the Beanstalkd Container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d beanstalkd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Configure Laravel to connect to that container by editing the &lt;code&gt;config/queue.php&lt;/code&gt; config file.&lt;/p&gt;

&lt;p&gt;a. first set &lt;code&gt;beanstalkd&lt;/code&gt; as default queue driver
b. set the queue host to beanstalkd : &lt;code&gt;QUEUE_HOST=beanstalkd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;beanstalkd is now available on default port &lt;code&gt;11300&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3 - Require the dependency package &lt;a href=&#34;https://github.com/pda/pheanstalk&#34;&gt;pda/pheanstalk&lt;/a&gt; using composer.&lt;/p&gt;

&lt;p&gt;Optionally you can use the Beanstalkd Console Container to manage your Queues from a web interface.&lt;/p&gt;

&lt;p&gt;1 - Run the Beanstalkd Console Container:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d beanstalkd-console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit &lt;code&gt;http://localhost:2080/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3 - Add the server&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Host: beanstalkd&lt;/li&gt;
&lt;li&gt;Port: 11300&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4 - Done.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-ElasticSearch&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-elasticsearch&#34;&gt;Use ElasticSearch&lt;/h2&gt;

&lt;p&gt;1 - Run the ElasticSearch Container (&lt;code&gt;elasticsearch&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit the localhost on port &lt;strong&gt;9200&lt;/strong&gt;:  &lt;code&gt;http://localhost:9200&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;install-elasticsearch-plugin&#34;&gt;Install ElasticSearch Plugin&lt;/h3&gt;

&lt;p&gt;1 - Install the ElasticSearch plugin like &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/plugins/current/plugins-delete-by-query.html&#34;&gt;delete-by-query&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec {container-name} /usr/share/elasticsearch/bin/plugin install delete-by-query
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Restart elasticsearch container&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker restart {container-name}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Selenium&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-selenium&#34;&gt;Use Selenium&lt;/h2&gt;

&lt;p&gt;1 - Run the Selenium Container (&lt;code&gt;selenium&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d selenium
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit the localhost on port &lt;strong&gt;4444&lt;/strong&gt; at the following URL:  &lt;code&gt;http://localhost:4444/wd/hub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-RethinkDB&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-rethinkdb&#34;&gt;Use RethinkDB&lt;/h2&gt;

&lt;p&gt;The RethinkDB is an open-source Database for Real-time Web (&lt;a href=&#34;https://rethinkdb.com/&#34;&gt;RethinkDB&lt;/a&gt;).
A package (&lt;a href=&#34;https://github.com/duxet/laravel-rethinkdb&#34;&gt;Laravel RethinkDB&lt;/a&gt;) is being developed and was released a version for Laravel 5.2 (experimental).&lt;/p&gt;

&lt;p&gt;1 - Run the RethinkDB Container (&lt;code&gt;rethinkdb&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d rethinkdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Access the RethinkDB Administration Console &lt;a href=&#34;http://localhost:8090/#tables&#34;&gt;http://localhost:8090/#tables&lt;/a&gt; for create a database called &lt;code&gt;database&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3 - Add the RethinkDB configurations to the &lt;code&gt;config/database.php&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;connections&#39; =&amp;gt; [

	&#39;rethinkdb&#39; =&amp;gt; [
		&#39;name&#39;      =&amp;gt; &#39;rethinkdb&#39;,
		&#39;driver&#39;    =&amp;gt; &#39;rethinkdb&#39;,
		&#39;host&#39;      =&amp;gt; env(&#39;DB_HOST&#39;, &#39;rethinkdb&#39;),
		&#39;port&#39;      =&amp;gt; env(&#39;DB_PORT&#39;, 28015),
		&#39;database&#39;  =&amp;gt; env(&#39;DB_DATABASE&#39;, &#39;test&#39;),
	]

	// ...

],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Open your Laravel&amp;rsquo;s &lt;code&gt;.env&lt;/code&gt; file and update the following variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set the &lt;code&gt;DB_CONNECTION&lt;/code&gt; to your &lt;code&gt;rethinkdb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;DB_HOST&lt;/code&gt; to &lt;code&gt;rethinkdb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;DB_PORT&lt;/code&gt; to &lt;code&gt;28015&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;set the &lt;code&gt;DB_DATABASE&lt;/code&gt; to &lt;code&gt;database&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-Minio&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-minio&#34;&gt;Use Minio&lt;/h2&gt;

&lt;p&gt;1 - Configure Minio:
  - On the workspace container, change &lt;code&gt;INSTALL_MC&lt;/code&gt; to true to get the client
  - Set &lt;code&gt;MINIO_ACCESS_KEY&lt;/code&gt; and &lt;code&gt;MINIO_ACCESS_SECRET&lt;/code&gt; if you wish to set proper keys&lt;/p&gt;

&lt;p&gt;2 - Run the Minio Container (&lt;code&gt;minio&lt;/code&gt;) with the &lt;code&gt;docker-compose up&lt;/code&gt; command. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d minio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Open your browser and visit the localhost on port &lt;strong&gt;9000&lt;/strong&gt; at the following URL:  &lt;code&gt;http://localhost:9000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4 - Create a bucket either through the webui or using the mc client:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  mc mb minio/bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5 - When configuring your other clients use the following details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  S3_HOST=http://minio
  S3_KEY=access
  S3_SECRET=secretkey
  S3_REGION=us-east-1
  S3_BUCKET=bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;CodeIgniter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-CodeIgniter&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-codeigniter&#34;&gt;Install CodeIgniter&lt;/h2&gt;

&lt;p&gt;To install CodeIgniter 3 on Laradock all you have to do is the following simple steps:&lt;/p&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;2 - Change &lt;code&gt;CODEIGNITER=false&lt;/code&gt; to &lt;code&gt;CODEIGNITER=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3 - Re-build your PHP-FPM Container &lt;code&gt;docker-compose build php-fpm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Misc&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Change-the-timezone&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-the-timezone&#34;&gt;Change the timezone&lt;/h2&gt;

&lt;p&gt;To change the timezone for the &lt;code&gt;workspace&lt;/code&gt; container, modify the &lt;code&gt;TZ&lt;/code&gt; build argument in the Docker Compose file to one in the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;TZ database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, if I want the timezone to be &lt;code&gt;New York&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - TZ=America/New_York
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also recommend &lt;a href=&#34;http://www.camroncade.com/managing-timezones-with-laravel/&#34;&gt;setting the timezone in Laravel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;CronJobs&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;adding-cron-jobs&#34;&gt;Adding cron jobs&lt;/h2&gt;

&lt;p&gt;You can add your cron jobs to &lt;code&gt;workspace/crontab/root&lt;/code&gt; after the &lt;code&gt;php artisan&lt;/code&gt; line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* * * * * php /var/www/artisan schedule:run &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1

# Custom cron
* * * * * root echo &amp;quot;Every Minute&amp;quot; &amp;gt; /var/log/cron.log 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you &lt;a href=&#34;#Change-the-timezone&#34;&gt;change the timezone&lt;/a&gt; if you don&amp;rsquo;t want to use the default (UTC).&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Workspace-ssh&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;access-workspace-via-ssh&#34;&gt;Access workspace via ssh&lt;/h2&gt;

&lt;p&gt;You can access the &lt;code&gt;workspace&lt;/code&gt; container through &lt;code&gt;localhost:2222&lt;/code&gt; by setting the &lt;code&gt;INSTALL_WORKSPACE_SSH&lt;/code&gt; build argument to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To change the default forwarded port for ssh:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
		ports:
			- &amp;quot;2222:22&amp;quot; # Edit this line
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;MySQL-access-from-host&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql-access-from-host&#34;&gt;MySQL access from host&lt;/h2&gt;

&lt;p&gt;You can forward the MySQL/MariaDB port to your host by making sure these lines are added to the &lt;code&gt;mysql&lt;/code&gt; or &lt;code&gt;mariadb&lt;/code&gt; section of the &lt;code&gt;docker-compose.yml&lt;/code&gt; or in your &lt;a href=&#34;https://docs.docker.com/compose/extends/&#34;&gt;environment specific Compose&lt;/a&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ports:
    - &amp;quot;3306:3306&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;MySQL-root-access&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql-root-access&#34;&gt;MySQL root access&lt;/h2&gt;

&lt;p&gt;The default username and password for the root MySQL user are &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1 - Enter the MySQL container: &lt;code&gt;docker-compose exec mysql bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2 - Enter mysql: &lt;code&gt;mysql -uroot -proot&lt;/code&gt; for non root access use &lt;code&gt;mysql -uhomestead -psecret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3 - See all users: &lt;code&gt;SELECT User FROM mysql.user;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4 - Run any commands &lt;code&gt;show databases&lt;/code&gt;, &lt;code&gt;show tables&lt;/code&gt;, &lt;code&gt;select * from.....&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Change-MySQL-port&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;change-mysql-port&#34;&gt;Change MySQL port&lt;/h2&gt;

&lt;p&gt;Modify the &lt;code&gt;mysql/my.cnf&lt;/code&gt; file to set your port number, &lt;code&gt;1234&lt;/code&gt; is used as an example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
port=1234
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need &lt;a href=&#34;#MySQL-access-from-host&#34;&gt;MySQL access from your host&lt;/a&gt;, do not forget to change the internal port number (&lt;code&gt;&amp;quot;3306:3306&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;quot;3306:1234&amp;quot;&lt;/code&gt;) in the docker-compose configuration file.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Use-custom-Domain&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-custom-domain-instead-of-the-docker-ip&#34;&gt;Use custom Domain (instead of the Docker IP)&lt;/h2&gt;

&lt;p&gt;Assuming your custom domain is &lt;code&gt;laravel.dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1 - Open your &lt;code&gt;/etc/hosts&lt;/code&gt; file and map your localhost address &lt;code&gt;127.0.0.1&lt;/code&gt; to the &lt;code&gt;laravel.dev&lt;/code&gt; domain, by adding the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;127.0.0.1    laravel.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Open your browser and visit &lt;code&gt;{http://laravel.dev}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Optionally you can define the server name in the NGINX configuration file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server_name laravel.dev;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Enable-Global-Composer-Build-Install&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;enable-global-composer-build-install&#34;&gt;Enable Global Composer Build Install&lt;/h2&gt;

&lt;p&gt;Enabling Global Composer Install during the build for the container allows you to get your composer requirements installed and available in the container after the build is done.&lt;/p&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;2 - Search for the &lt;code&gt;COMPOSER_GLOBAL_INSTALL&lt;/code&gt; argument under the Workspace Container and set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - COMPOSER_GLOBAL_INSTALL=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Now add your dependencies to &lt;code&gt;workspace/composer.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4 - Re-build the Workspace Container &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Prestissimo&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-prestissimo&#34;&gt;Install Prestissimo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hirak/prestissimo&#34;&gt;Prestissimo&lt;/a&gt; is a plugin for composer which enables parallel install functionality.&lt;/p&gt;

&lt;p&gt;1 - Enable Running Global Composer Install during the Build:&lt;/p&gt;

&lt;p&gt;Click on this &lt;a href=&#34;#Enable-Global-Composer-Build-Install&#34;&gt;Enable Global Composer Build Install&lt;/a&gt; and do steps 1 and 2 only then continue here.&lt;/p&gt;

&lt;p&gt;2 - Add prestissimo as requirement in Composer:&lt;/p&gt;

&lt;p&gt;a - Now open the &lt;code&gt;workspace/composer.json&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;b - Add &lt;code&gt;&amp;quot;hirak/prestissimo&amp;quot;: &amp;quot;^0.3&amp;quot;&lt;/code&gt; as requirement&lt;/p&gt;

&lt;p&gt;c - Re-build the Workspace Container &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Node&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-node-nvm&#34;&gt;Install Node + NVM&lt;/h2&gt;

&lt;p&gt;To install NVM and NodeJS in the Workspace container&lt;/p&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;2 - Search for the &lt;code&gt;INSTALL_NODE&lt;/code&gt; argument under the Workspace Container and set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_NODE=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Re-build the container &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Yarn&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-node-yarn&#34;&gt;Install Node + YARN&lt;/h2&gt;

&lt;p&gt;Yarn is a new package manager for JavaScript. It is so faster than npm, which you can find &lt;a href=&#34;http://yarnpkg.com/en/compare&#34;&gt;here&lt;/a&gt;.To install NodeJS and &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; in the Workspace container:&lt;/p&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;2 - Search for the &lt;code&gt;INSTALL_NODE&lt;/code&gt; and &lt;code&gt;INSTALL_YARN&lt;/code&gt; argument under the Workspace Container and set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_NODE=true
                - INSTALL_YARN=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Re-build the container &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Linuxbrew&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-linuxbrew&#34;&gt;Install Linuxbrew&lt;/h2&gt;

&lt;p&gt;Linuxbrew is a package manager for Linux. It is the Linux version of MacOS Homebrew and can be found &lt;a href=&#34;http://linuxbrew.sh&#34;&gt;here&lt;/a&gt;. To install Linuxbrew in the Workspace container:&lt;/p&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;2 - Search for the &lt;code&gt;INSTALL_LINUXBREW&lt;/code&gt; argument under the Workspace Container and set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_LINUXBREW=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 - Re-build the container &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Common-Aliases&#34;&gt;&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;common-terminal-aliases&#34;&gt;Common Terminal Aliases&lt;/h2&gt;

&lt;p&gt;When you start your docker container, Laradock will copy the &lt;code&gt;aliases.sh&lt;/code&gt; file located in the &lt;code&gt;laradock/workspace&lt;/code&gt; directory and add sourcing to the container &lt;code&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You are free to modify the &lt;code&gt;aliases.sh&lt;/code&gt; as you see fit, adding your own aliases (or function macros) to suit your requirements.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Aerospike-Extension&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-aerospike-extension&#34;&gt;Install Aerospike extension&lt;/h2&gt;

&lt;p&gt;1 - First install &lt;code&gt;aerospike&lt;/code&gt; in the Workspace and the PHP-FPM Containers:
&lt;br&gt;
a) open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
b) search for the &lt;code&gt;INSTALL_AEROSPIKE_EXTENSION&lt;/code&gt; argument under the Workspace Container
&lt;br&gt;
c) set it to &lt;code&gt;true&lt;/code&gt;
&lt;br&gt;
d) search for the &lt;code&gt;INSTALL_AEROSPIKE_EXTENSION&lt;/code&gt; argument under the PHP-FPM Container
&lt;br&gt;
e) set it to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_AEROSPIKE_EXTENSION=true
    ...
    php-fpm:
        build:
            context: ./php-fpm
            args:
                - INSTALL_AEROSPIKE_EXTENSION=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Re-build the containers &lt;code&gt;docker-compose build workspace php-fpm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Install-Laravel-Envoy&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-laravel-envoy-envoy-task-runner&#34;&gt;Install Laravel Envoy (Envoy Task Runner)&lt;/h2&gt;

&lt;p&gt;1 - Open the &lt;code&gt;docker-compose.yml&lt;/code&gt; file
&lt;br&gt;
2 - Search for the &lt;code&gt;INSTALL_LARAVEL_ENVOY&lt;/code&gt; argument under the Workspace Container
&lt;br&gt;
3 - Set it to &lt;code&gt;true&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;It should be like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;    workspace:
        build:
            context: ./workspace
            args:
                - INSTALL_LARAVEL_ENVOY=true
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 - Re-build the containers &lt;code&gt;docker-compose build workspace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://laravel.com/docs/5.3/envoy&#34;&gt;&lt;strong&gt;Laravel Envoy Documentation Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;phpstorm-debugging&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;phpstorm-debugging-guide&#34;&gt;PHPStorm Debugging Guide&lt;/h2&gt;

&lt;p&gt;Remote debug Laravel web and phpunit tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/laradock/laradock/blob/master/_guides/phpstorm.md&#34;&gt;&lt;strong&gt;Debugging Guide Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;keep-tracking-Laradock&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;keep-track-of-your-laradock-changes&#34;&gt;Keep track of your Laradock changes&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Fork the Laradock repository.&lt;/li&gt;
&lt;li&gt;Use that fork as a submodule.&lt;/li&gt;
&lt;li&gt;Commit all your changes to your fork.&lt;/li&gt;
&lt;li&gt;Pull new stuff from the main repository from time to time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;upgrading-laradock&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;upgrading-laradock&#34;&gt;Upgrading Laradock&lt;/h2&gt;

&lt;p&gt;Moving from Docker Toolbox (VirtualBox) to Docker Native (for Mac/Windows). Requires upgrading Laradock from v3.* to v4.*:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop the docker VM &lt;code&gt;docker-machine stop {default}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install Docker for &lt;a href=&#34;https://docs.docker.com/docker-for-mac/&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/docker-for-windows/&#34;&gt;Windows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Upgrade Laradock to &lt;code&gt;v4.*.*&lt;/code&gt; (&lt;code&gt;git pull origin master&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use Laradock as you used to do: &lt;code&gt;docker-compose up -d nginx mysql&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you face any problem with the last step above: rebuild all your containers
&lt;code&gt;docker-compose build --no-cache&lt;/code&gt;
&amp;ldquo;Warning Containers Data might be lost!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Speed-MacOS&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;improve-speed-on-macos&#34;&gt;Improve speed on MacOS&lt;/h2&gt;

&lt;p&gt;Sharing code into Docker containers with osxfs have very poor performance compared to Linux. Likely there are some workarounds:&lt;/p&gt;

&lt;h3 id=&#34;workaround-a-using-dinghy&#34;&gt;Workaround A: using dinghy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/codekitchen/dinghy&#34;&gt;Dinghy&lt;/a&gt; creates its own VM using docker-machine, it will not modify your existing docker-machine VMs.&lt;/p&gt;

&lt;p&gt;Quick Setup giude, (we recommend you check their docs)&lt;/p&gt;

&lt;p&gt;1) &lt;code&gt;brew tap codekitchen/dinghy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) &lt;code&gt;brew install dinghy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;code&gt;dinghy create --provider virtualbox&lt;/code&gt; (must have virtualbox installed, but they support other providers if you prefer)&lt;/p&gt;

&lt;p&gt;4) after the above command is done it will display some env variables, copy them to the bash profile or zsh or.. (this will instruct docker to use the server running inside the VM)&lt;/p&gt;

&lt;p&gt;5) &lt;code&gt;docker-compose up ...&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;workaround-b-using-d4m-nfs&#34;&gt;Workaround B: using d4m-nfs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;D4m-nfs&lt;/a&gt; automatically mount NFS volume instead of osxfs one.&lt;/p&gt;

&lt;p&gt;1) Update the Docker [File Sharing] preferences:&lt;/p&gt;

&lt;p&gt;Click on the Docker Icon &amp;gt; Preferences &amp;gt; (remove everything form the list except &lt;code&gt;/tmp&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;2) Restart Docker.&lt;/p&gt;

&lt;p&gt;3) Clone the &lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;d4m-nfs&lt;/a&gt; repository to your &lt;code&gt;home&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/IFSight/d4m-nfs ~/d4m-nfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Create (or edit) the file &lt;code&gt;~/d4m-nfs/etc/d4m-nfs-mounts.txt&lt;/code&gt;, and write the follwing configuration in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;/Users:/Users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) Create (or edit) the file &lt;code&gt;/etc/exports&lt;/code&gt;, make sure it exists and is empty. (There may be collisions if you come from Vagrant or if you already executed the &lt;code&gt;d4m-nfs.sh&lt;/code&gt; script before).&lt;/p&gt;

&lt;p&gt;6) Run the &lt;code&gt;d4m-nfs.sh&lt;/code&gt; script (might need Sudo):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/d4m-nfs/d4m-nfs.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it! Run your containers.. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: If you faced any errors, try restarting Docker, and make sure you have no spaces in the &lt;code&gt;d4m-nfs-mounts.txt&lt;/code&gt; file, and your &lt;code&gt;/etc/exports&lt;/code&gt; file is clear.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;other-good-workarounds&#34;&gt;Other good workarounds:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EugenMayer/docker-sync&#34;&gt;docker-sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add more here..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details about this issue &lt;a href=&#34;https://github.com/docker/for-mac/issues/77&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;a name=&#34;Common-Problems&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;common-problems&#34;&gt;Common Problems&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Here&amp;rsquo;s a list of the common problems you might face, and the possible solutions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-see-a-blank-white-page-instead-of-the-laravel-welcome-page&#34;&gt;I see a blank (white) page instead of the Laravel &amp;lsquo;Welcome&amp;rsquo; page!&lt;/h2&gt;

&lt;p&gt;Run the following command from the Laravel root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chmod -R 777 storage bootstrap/cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-see-welcome-to-nginx-instead-of-the-laravel-app&#34;&gt;I see &amp;ldquo;Welcome to nginx&amp;rdquo; instead of the Laravel App!&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;http://127.0.0.1&lt;/code&gt; instead of &lt;code&gt;http://localhost&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-see-an-error-message-containing-address-already-in-use-or-port-is-already-allocated&#34;&gt;I see an error message containing &lt;code&gt;address already in use&lt;/code&gt; or &lt;code&gt;port is already allocated&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Make sure the ports for the services that you are trying to run (22, 80, 443, 3306, etc.) are not being used already by other programs on the host, such as a built in &lt;code&gt;apache&lt;/code&gt;/&lt;code&gt;httpd&lt;/code&gt; service or other development tools you have installed.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-get-nginx-error-404-not-found-on-windows&#34;&gt;I get NGINX error 404 Not Found on Windows.&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to docker Settings on your Windows machine.&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Shared Drives&lt;/code&gt; tab and check the drive that contains your project files.&lt;/li&gt;
&lt;li&gt;Enter your windows username and password.&lt;/li&gt;
&lt;li&gt;Go to the &lt;code&gt;reset&lt;/code&gt; tab and click restart docker.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-time-in-my-services-does-not-match-the-current-time&#34;&gt;The time in my services does not match the current time&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you&amp;rsquo;ve &lt;a href=&#34;#Change-the-timezone&#34;&gt;changed the timezone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Stop and rebuild the containers (&lt;code&gt;docker-compose up -d --build &amp;lt;services&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-get-mysql-connection-refused&#34;&gt;I get MySQL connection refused&lt;/h2&gt;

&lt;p&gt;This error sometimes happens because your Laravel application isn&amp;rsquo;t running on the container localhost IP (Which is 127.0.0.1). Steps to fix it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option A

&lt;ol&gt;
&lt;li&gt;Check your running Laravel application IP by dumping &lt;code&gt;Request::ip()&lt;/code&gt; variable using &lt;code&gt;dd(Request::ip())&lt;/code&gt; anywhere on your application. The result is the IP of your Laravel container.&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;DB_HOST&lt;/code&gt; variable on env with the IP that you received from previous step.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Option B

&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;DB_HOST&lt;/code&gt; value to the same name as the MySQL docker container. The Laradock docker-compose file currently has this as &lt;code&gt;mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Related Projects</title>
      <link>http://laradock.io/related-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/related-projects/</guid>
      <description>&lt;p&gt;Laradock related projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lorinlee/laradock-cli&#34;&gt;Laradock CLI&lt;/a&gt; by &lt;a href=&#34;https://github.com/lorinlee&#34;&gt;LorinLee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bagart/laradock_env&#34;&gt;Laradock Env&lt;/a&gt; by &lt;a href=&#34;https://github.com/bagart&#34;&gt;BAGArt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/poyhsiao/Klaradock&#34;&gt;Klaradock&lt;/a&gt; by &lt;a href=&#34;https://github.com/poyhsiao&#34;&gt;Kim Hsiao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sifat-rahim/ansible-laradock-kubernetes&#34;&gt;Ansible Laradock Kubernetes&lt;/a&gt; by &lt;a href=&#34;https://github.com/sifat-rahim&#34;&gt;Sifat Rahim&lt;/a&gt;
These Docker Compose projects have piqued our interest:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ojhaujjwal/magedock&#34;&gt;MageDock&lt;/a&gt; by &lt;a href=&#34;https://github.com/ojhaujjwal&#34;&gt;Ujjwal Ojha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/scudelletti/rubydev-dock&#34;&gt;RubyDev-Dock&lt;/a&gt; by &lt;a href=&#34;https://github.com/scudelletti&#34;&gt;Diogo Scudelletti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Osedea/nodock&#34;&gt;NoDock&lt;/a&gt; by &lt;a href=&#34;https://github.com/Osedea&#34;&gt;Osedea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want your project listed here, please open an issue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Help &amp; Questions</title>
      <link>http://laradock.io/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/help/</guid>
      <description>&lt;p&gt;Join the chat room on &lt;a href=&#34;https://gitter.im/Laradock/laradock&#34;&gt;Gitter&lt;/a&gt; and get help and support from the community.&lt;/p&gt;

&lt;p&gt;You can as well can open an &lt;a href=&#34;https://github.com/laradock/laradock/issues&#34;&gt;issue&lt;/a&gt; on Github (will be labeled as Question) and discuss it with people on &lt;a href=&#34;https://gitter.im/Laradock/laradock&#34;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://laradock.io/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/contributing/</guid>
      <description>

&lt;p&gt;Your contribution is more than welcome.&lt;/p&gt;

&lt;h2 id=&#34;i-have-a-question-problem&#34;&gt;I have a Question/Problem&lt;/h2&gt;

&lt;p&gt;If you have questions about how to use Laradock, please direct your questions to the discussion on &lt;a href=&#34;https://gitter.im/Laradock/laradock&#34;&gt;Gitter&lt;/a&gt;. If you believe your question could help others, then consider opening an &lt;a href=&#34;https://github.com/laradock/laradock/issues&#34;&gt;Issue&lt;/a&gt; (it will be labeled as &lt;code&gt;Question&lt;/code&gt;) And you can still seek help on Gitter for it.&lt;/p&gt;

&lt;h2 id=&#34;i-found-an-issue&#34;&gt;I found an Issue&lt;/h2&gt;

&lt;p&gt;If have an issue or you found a typo in the documentation, you can help us by
opnening an &lt;a href=&#34;https://github.com/laradock/laradock/issues&#34;&gt;Issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps to do before opening an Issue:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before you submit your issue search the archive, maybe your question was already answered couple hours ago (search in the closed Issues as well).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Decide if the Issue belongs to this project or to &lt;a href=&#34;https://github.com/docker&#34;&gt;Docker&lt;/a&gt; itself! or even the tool you are using such as Nginx or MongoDB&amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If your issue appears to be a bug, and hasn&amp;rsquo;t been reported, then open a new issue.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This Help us to maximize the effort we can spend fixing issues and adding new
features, by not reporting duplicate issues.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;i-want-a-feature&#34;&gt;I want a Feature&lt;/h2&gt;

&lt;p&gt;You can request a new feature by submitting an &lt;a href=&#34;https://github.com/laradock/laradock/issues&#34;&gt;Issue&lt;/a&gt; (it will be labeled as &lt;code&gt;Feature Suggestion&lt;/code&gt;). If you would like to implement a new feature then consider submitting a Pull Request yourself.&lt;/p&gt;

&lt;h2 id=&#34;i-want-to-update-the-documentation-site&#34;&gt;I want to update the Documentation (Site)&lt;/h2&gt;

&lt;p&gt;Laradock uses &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; as website generator tool, with the &lt;a href=&#34;http://themes.gohugo.io/theme/material-docs/&#34;&gt;Material Docs theme&lt;/a&gt;. You might need to check their docs quickly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; on your machine (easy thing).&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;DOCUMENTATION/_settings/content&lt;/code&gt; and search for the markdown file you want to edit (every folder represents a section in the menu).&lt;/li&gt;
&lt;li&gt;Delete the &lt;code&gt;/docs&lt;/code&gt; folder from the root.&lt;/li&gt;
&lt;li&gt;When you finish editing, go to &lt;code&gt;DOCUMENTATION/_settings/&lt;/code&gt; and run the &lt;code&gt;hugo&lt;/code&gt; command to generate the HTML docs (inside new &lt;code&gt;/docs&lt;/code&gt; folder).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;to-host-the-website-locally&#34;&gt;To Host the website locally&lt;/h3&gt;

&lt;p&gt;Go to &lt;code&gt;DOCUMENTATION/_settings&lt;/code&gt; in your terminal and run &lt;code&gt;hugo serve&lt;/code&gt; to host the website locally.&lt;/p&gt;

&lt;h3 id=&#34;edit-the-sidebar&#34;&gt;Edit the sidebar&lt;/h3&gt;

&lt;p&gt;To add a new section to the sidebar or edit existing one, you need to edit this file &lt;code&gt;DOCUMENTATION/_settings/config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-to-support-new-software-add-new-container&#34;&gt;How to support new Software (Add new Container)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create folder with the software name.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;Dockerfile&lt;/code&gt;, write your code there.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You may add additional files in the software folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the software to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure you follow our commenting style.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the software in the &lt;code&gt;Documentation&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;edit-existing-software-edit-a-container&#34;&gt;Edit existing Software (Edit a Container)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open the software (container) folder.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit the files you want to update.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to edit the base image of the &lt;code&gt;Workspace&lt;/code&gt; or the &lt;code&gt;php-fpm&lt;/code&gt; Containers,
you need to edit their Docker-files from their GitHub repositories. For more info read their Dockerfiles comment on the Laradock repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure to update the &lt;code&gt;Documentation&lt;/code&gt; in case you made any changes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pull-request&#34;&gt;Pull Request&lt;/h2&gt;

&lt;h3 id=&#34;1-before-submitting-a-pull-request-pr&#34;&gt;1. Before Submitting a Pull Request (PR)&lt;/h3&gt;

&lt;p&gt;Always Test everything and make sure its working:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull the latest updates (or fork of you don’t have permission)&lt;/li&gt;
&lt;li&gt;Before editing anything:

&lt;ul&gt;
&lt;li&gt;Test building the container (docker-compose build &amp;ndash;no-cache container-name) build with no cache first.&lt;/li&gt;
&lt;li&gt;Test running the container with some other containers in real app and see of everything is working fine.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Now edit the container (edit section by section and test rebuilding the container after every edited section)

&lt;ul&gt;
&lt;li&gt;Testing building the container (docker-compose build container-name) with no errors.&lt;/li&gt;
&lt;li&gt;Test it in a real App if possible.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-submitting-a-pr&#34;&gt;2. Submitting a PR&lt;/h3&gt;

&lt;p&gt;Consider the following guidelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search &lt;a href=&#34;https://github.com/laradock/laradock/pulls&#34;&gt;GitHub&lt;/a&gt; for an open or closed Pull Request that relates to your submission. You don&amp;rsquo;t want to duplicate efforts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make your changes in a new git branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; git checkout -b my-fix-branch master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit your changes using a descriptive commit message.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push your branch to GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git push origin my-fix-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In GitHub, send a pull request to &lt;code&gt;laradock:master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If we suggest changes then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the required updates.&lt;/li&gt;
&lt;li&gt;Commit your changes to your branch (e.g. &lt;code&gt;my-fix-branch&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Push the changes to your GitHub repository (this will update your Pull Request).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If the PR gets too outdated we may ask you to rebase and force push to update the PR:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git rebase master -i
git push origin my-fix-branch -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;WARNING. Squashing or reverting commits and forced push thereafter may remove GitHub comments on code that were previously made by you and others in your commits.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-after-your-pr-is-merged&#34;&gt;3. After your PR is merged&lt;/h3&gt;

&lt;p&gt;After your pull request is merged, you can safely delete your branch and pull the changes from the main (upstream) repository:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git push origin --delete my-fix-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check out the master branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git checkout master -f
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete the local branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git branch -D my-fix-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update your master with the latest upstream version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull --ff upstream master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;happy-coding&#34;&gt;Happy Coding :)&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://laradock.io/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/license/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/laradock/laradock/blob/master/LICENSE&#34;&gt;MIT License&lt;/a&gt; (MIT)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://laradock.io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://laradock.io/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>